name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Get DB Credentials from AWS Parameter Store
        run: |
          echo "Fetching DB credentials from AWS Parameter Store..."
          echo "DB_USER=$(aws ssm get-parameter --name '/DB_USER' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "DB_PASS=$(aws ssm get-parameter --name '/DB_PASS' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "DB_HOST=$(aws ssm get-parameter --name '/DB_HOST' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "DB_NAME=$(aws ssm get-parameter --name '/DB_NAME' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "DB_PORT=$(aws ssm get-parameter --name '/DB_PORT' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV

      - name: Save private key to file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY_ED25519 }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          echo "Testing SSH connection to EC2..."
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'Connection successful!'"

      - name: Create project directory on EC2 with proper permissions
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo mkdir -p /home/ec2-user/auth-service && sudo chown -R ec2-user:ec2-user /home/ec2-user/auth-service"

      - name: Copy docker-compose.yml to EC2
        run: |
          scp -i ~/.ssh/id_ed25519 docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/auth-service/docker-compose.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Build and Push auth-service Docker Image
        run: |
          docker build \
            --build-arg DB_HOST=${{ secrets.DB_HOST }} \
            --build-arg DB_PORT=${{ secrets.DB_PORT }} \
            --build-arg DB_NAME=${{ secrets.DB_NAME }} \
            --build-arg DB_USER=${{ secrets.DB_USER }} \
            --build-arg DB_PASS=${{ secrets.DB_PASS }} \
            -t ghcr.io/ngolik/auth-service:latest .
          docker push ghcr.io/ngolik/auth-service:latest


      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY_ED25519 }}
          script: |
            echo "Pulling latest Docker images..."
            docker pull ghcr.io/ngolik/eureka-server:latest
            docker pull ghcr.io/ngolik/api-gateway:latest
            docker pull ghcr.io/ngolik/auth-service:latest
            docker pull postgres:latest

            echo "Running docker-compose..."
            export DB_USER=${{ secrets.DB_USER }}
            export DB_PASS=${{ secrets.DB_PASS }}
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export DB_PORT=${{ secrets.DB_PORT }}
            cd /home/ec2-user/auth-service
            sudo DB_USER=$DB_USER DB_PASS=$DB_PASS DB_HOST=$DB_HOST DB_NAME=$DB_NAME DB_PORT=$DB_PORT docker-compose up -d

